"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
"""

import pytest
import requests
from typing import Generator
import time


@pytest.fixture(scope="session")
def api_base_url() -> str:
    """–ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API —Ç–µ—Å—Ç–æ–≤"""
    return "http://localhost:3000/api"


@pytest.fixture(scope="session")
def ensure_server_running(api_base_url: str) -> Generator[None, None, None]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤"""
    max_retries = 30
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            response = requests.get(f"{api_base_url}/health", timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {api_base_url}")
                break
        except requests.exceptions.RequestException:
            pass
            
        retry_count += 1
        if retry_count < max_retries:
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞... –ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}")
            time.sleep(2)
    else:
        pytest.skip(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {api_base_url} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    
    yield
    
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


@pytest.fixture
def cleanup_test_users():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
    test_users = []
    
    def add_user(login: str):
        test_users.append(login)
    
    yield add_user
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    for user_login in test_users:
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            # requests.delete(f"{api_base_url}/users/{user_login}")
            pass
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_login}: {e}")


def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest"""
    config.addinivalue_line(
        "markers", "integration: –ø–æ–º–µ—á–∞–µ—Ç —Ç–µ—Å—Ç—ã –∫–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ"
    )
    config.addinivalue_line(
        "markers", "smoke: –ø–æ–º–µ—á–∞–µ—Ç —Ç–µ—Å—Ç—ã –∫–∞–∫ smoke —Ç–µ—Å—Ç—ã"
    )


def pytest_collection_modifyitems(config, items):
    """–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    for item in items:
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä integration –∫–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º –≤ test_registration
        if "test_registration" in item.nodeid:
            item.add_marker(pytest.mark.integration)